### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type AggregateDepartment {
	count: Int!
}

type AggregateEmployee {
	count: Int!
}

type AggregateOffice {
	count: Int!
}

type Department {
	employees(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: EmployeeOrderByInput
		skip: Int
		where: EmployeeWhereInput
	): [Employee!]
	id: ID!
	lead: Employee
	name: String!
}

type DepartmentConnection {
	aggregate: AggregateDepartment!
	edges: [DepartmentEdge!]!
	pageInfo: PageInfo!
}

type DepartmentEdge {
	cursor: String!
	node: Department!
}

enum DepartmentOrderByInput {
	createdAt_ASC
	createdAt_DESC
	id_ASC
	id_DESC
	name_ASC
	name_DESC
	updatedAt_ASC
	updatedAt_DESC
}

input DepartmentWhereInput {
	AND: [DepartmentWhereInput!]
	employees_every: EmployeeWhereInput
	employees_none: EmployeeWhereInput
	employees_some: EmployeeWhereInput
	id: ID
	id_contains: ID
	id_ends_with: ID
	id_gt: ID
	id_gte: ID
	id_in: [ID!]
	id_lt: ID
	id_lte: ID
	id_not: ID
	id_not_contains: ID
	id_not_ends_with: ID
	id_not_in: [ID!]
	id_not_starts_with: ID
	id_starts_with: ID
	lead: EmployeeWhereInput
	name: String
	name_contains: String
	name_ends_with: String
	name_gt: String
	name_gte: String
	name_in: [String!]
	name_lt: String
	name_lte: String
	name_not: String
	name_not_contains: String
	name_not_ends_with: String
	name_not_in: [String!]
	name_not_starts_with: String
	name_starts_with: String
	NOT: [DepartmentWhereInput!]
	OR: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
	id: ID
	name: String
}

type Employee {
	department: Department
	email: String!
	firstName: String!
	id: ID!
	lastName: String!
	office: Office
}

type EmployeeConnection {
	aggregate: AggregateEmployee!
	edges: [EmployeeEdge!]!
	pageInfo: PageInfo!
}

type EmployeeEdge {
	cursor: String!
	node: Employee!
}

enum EmployeeOrderByInput {
	createdAt_ASC
	createdAt_DESC
	email_ASC
	email_DESC
	firstName_ASC
	firstName_DESC
	id_ASC
	id_DESC
	lastName_ASC
	lastName_DESC
	updatedAt_ASC
	updatedAt_DESC
}

input EmployeeWhereInput {
	AND: [EmployeeWhereInput!]
	department: DepartmentWhereInput
	email: String
	email_contains: String
	email_ends_with: String
	email_gt: String
	email_gte: String
	email_in: [String!]
	email_lt: String
	email_lte: String
	email_not: String
	email_not_contains: String
	email_not_ends_with: String
	email_not_in: [String!]
	email_not_starts_with: String
	email_starts_with: String
	firstName: String
	firstName_contains: String
	firstName_ends_with: String
	firstName_gt: String
	firstName_gte: String
	firstName_in: [String!]
	firstName_lt: String
	firstName_lte: String
	firstName_not: String
	firstName_not_contains: String
	firstName_not_ends_with: String
	firstName_not_in: [String!]
	firstName_not_starts_with: String
	firstName_starts_with: String
	id: ID
	id_contains: ID
	id_ends_with: ID
	id_gt: ID
	id_gte: ID
	id_in: [ID!]
	id_lt: ID
	id_lte: ID
	id_not: ID
	id_not_contains: ID
	id_not_ends_with: ID
	id_not_in: [ID!]
	id_not_starts_with: ID
	id_starts_with: ID
	lastName: String
	lastName_contains: String
	lastName_ends_with: String
	lastName_gt: String
	lastName_gte: String
	lastName_in: [String!]
	lastName_lt: String
	lastName_lte: String
	lastName_not: String
	lastName_not_contains: String
	lastName_not_ends_with: String
	lastName_not_in: [String!]
	lastName_not_starts_with: String
	lastName_starts_with: String
	NOT: [EmployeeWhereInput!]
	office: OfficeWhereInput
	OR: [EmployeeWhereInput!]
}

input EmployeeWhereUniqueInput {
	email: String
	id: ID
}

type Office {
	employees(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: EmployeeOrderByInput
		skip: Int
		where: EmployeeWhereInput
	): [Employee!]
	id: ID!
	location: String!
	name: String!
}

type OfficeConnection {
	aggregate: AggregateOffice!
	edges: [OfficeEdge!]!
	pageInfo: PageInfo!
}

type OfficeEdge {
	cursor: String!
	node: Office!
}

enum OfficeOrderByInput {
	createdAt_ASC
	createdAt_DESC
	id_ASC
	id_DESC
	location_ASC
	location_DESC
	name_ASC
	name_DESC
	updatedAt_ASC
	updatedAt_DESC
}

input OfficeWhereInput {
	AND: [OfficeWhereInput!]
	employees_every: EmployeeWhereInput
	employees_none: EmployeeWhereInput
	employees_some: EmployeeWhereInput
	id: ID
	id_contains: ID
	id_ends_with: ID
	id_gt: ID
	id_gte: ID
	id_in: [ID!]
	id_lt: ID
	id_lte: ID
	id_not: ID
	id_not_contains: ID
	id_not_ends_with: ID
	id_not_in: [ID!]
	id_not_starts_with: ID
	id_starts_with: ID
	location: String
	location_contains: String
	location_ends_with: String
	location_gt: String
	location_gte: String
	location_in: [String!]
	location_lt: String
	location_lte: String
	location_not: String
	location_not_contains: String
	location_not_ends_with: String
	location_not_in: [String!]
	location_not_starts_with: String
	location_starts_with: String
	name: String
	name_contains: String
	name_ends_with: String
	name_gt: String
	name_gte: String
	name_in: [String!]
	name_lt: String
	name_lte: String
	name_not: String
	name_not_contains: String
	name_not_ends_with: String
	name_not_in: [String!]
	name_not_starts_with: String
	name_starts_with: String
	NOT: [OfficeWhereInput!]
	OR: [OfficeWhereInput!]
}

input OfficeWhereUniqueInput {
	id: ID
	name: String
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

type Query {
	department(where: DepartmentWhereUniqueInput!): Department
	departments(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: DepartmentOrderByInput
		skip: Int
		where: DepartmentWhereInput
	): [Department!]!
	departmentsConnection(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: DepartmentOrderByInput
		skip: Int
		where: DepartmentWhereInput
	): DepartmentConnection!
	employee(where: EmployeeWhereUniqueInput!): Employee
	employees(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: EmployeeOrderByInput
		skip: Int
		where: EmployeeWhereInput
	): [Employee!]!
	employeesConnection(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: EmployeeOrderByInput
		skip: Int
		where: EmployeeWhereInput
	): EmployeeConnection!
	office(where: OfficeWhereUniqueInput!): Office
	offices(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: OfficeOrderByInput
		skip: Int
		where: OfficeWhereInput
	): [Office!]!
	officesConnection(
		after: String
		before: String
		first: Int
		last: Int
		orderBy: OfficeOrderByInput
		skip: Int
		where: OfficeWhereInput
	): OfficeConnection!
}
