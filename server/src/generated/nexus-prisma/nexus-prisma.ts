/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
	interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
	objectTypes: {
		fields: {
			Query: QueryObject
			Employee: EmployeeObject
			Department: DepartmentObject
			Office: OfficeObject
			EmployeeConnection: EmployeeConnectionObject
			PageInfo: PageInfoObject
			EmployeeEdge: EmployeeEdgeObject
			AggregateEmployee: AggregateEmployeeObject
			OfficeConnection: OfficeConnectionObject
			OfficeEdge: OfficeEdgeObject
			AggregateOffice: AggregateOfficeObject
			DepartmentConnection: DepartmentConnectionObject
			DepartmentEdge: DepartmentEdgeObject
			AggregateDepartment: AggregateDepartmentObject
			Mutation: MutationObject
			BatchPayload: BatchPayloadObject
			Subscription: SubscriptionObject
			EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadObject
			EmployeePreviousValues: EmployeePreviousValuesObject
			OfficeSubscriptionPayload: OfficeSubscriptionPayloadObject
			OfficePreviousValues: OfficePreviousValuesObject
			DepartmentSubscriptionPayload: DepartmentSubscriptionPayloadObject
			DepartmentPreviousValues: DepartmentPreviousValuesObject
		}
		fieldsDetails: {
			Query: QueryFieldDetails
			Employee: EmployeeFieldDetails
			Department: DepartmentFieldDetails
			Office: OfficeFieldDetails
			EmployeeConnection: EmployeeConnectionFieldDetails
			PageInfo: PageInfoFieldDetails
			EmployeeEdge: EmployeeEdgeFieldDetails
			AggregateEmployee: AggregateEmployeeFieldDetails
			OfficeConnection: OfficeConnectionFieldDetails
			OfficeEdge: OfficeEdgeFieldDetails
			AggregateOffice: AggregateOfficeFieldDetails
			DepartmentConnection: DepartmentConnectionFieldDetails
			DepartmentEdge: DepartmentEdgeFieldDetails
			AggregateDepartment: AggregateDepartmentFieldDetails
			Mutation: MutationFieldDetails
			BatchPayload: BatchPayloadFieldDetails
			Subscription: SubscriptionFieldDetails
			EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadFieldDetails
			EmployeePreviousValues: EmployeePreviousValuesFieldDetails
			OfficeSubscriptionPayload: OfficeSubscriptionPayloadFieldDetails
			OfficePreviousValues: OfficePreviousValuesFieldDetails
			DepartmentSubscriptionPayload: DepartmentSubscriptionPayloadFieldDetails
			DepartmentPreviousValues: DepartmentPreviousValuesFieldDetails
		}
	}
	inputTypes: {
		fields: {
			EmployeeWhereUniqueInput: EmployeeWhereUniqueInputInputObject
			EmployeeWhereInput: EmployeeWhereInputInputObject
			DepartmentWhereInput: DepartmentWhereInputInputObject
			OfficeWhereInput: OfficeWhereInputInputObject
			OfficeWhereUniqueInput: OfficeWhereUniqueInputInputObject
			DepartmentWhereUniqueInput: DepartmentWhereUniqueInputInputObject
			EmployeeCreateInput: EmployeeCreateInputInputObject
			DepartmentCreateOneInput: DepartmentCreateOneInputInputObject
			DepartmentCreateInput: DepartmentCreateInputInputObject
			EmployeeCreateOneInput: EmployeeCreateOneInputInputObject
			EmployeeCreateManyInput: EmployeeCreateManyInputInputObject
			OfficeCreateOneWithoutEmployeesInput: OfficeCreateOneWithoutEmployeesInputInputObject
			OfficeCreateWithoutEmployeesInput: OfficeCreateWithoutEmployeesInputInputObject
			EmployeeUpdateInput: EmployeeUpdateInputInputObject
			DepartmentUpdateOneInput: DepartmentUpdateOneInputInputObject
			DepartmentUpdateDataInput: DepartmentUpdateDataInputInputObject
			EmployeeUpdateOneInput: EmployeeUpdateOneInputInputObject
			EmployeeUpdateDataInput: EmployeeUpdateDataInputInputObject
			OfficeUpdateOneWithoutEmployeesInput: OfficeUpdateOneWithoutEmployeesInputInputObject
			OfficeUpdateWithoutEmployeesDataInput: OfficeUpdateWithoutEmployeesDataInputInputObject
			OfficeUpsertWithoutEmployeesInput: OfficeUpsertWithoutEmployeesInputInputObject
			EmployeeUpsertNestedInput: EmployeeUpsertNestedInputInputObject
			EmployeeUpdateManyInput: EmployeeUpdateManyInputInputObject
			EmployeeUpdateWithWhereUniqueNestedInput: EmployeeUpdateWithWhereUniqueNestedInputInputObject
			EmployeeUpsertWithWhereUniqueNestedInput: EmployeeUpsertWithWhereUniqueNestedInputInputObject
			EmployeeScalarWhereInput: EmployeeScalarWhereInputInputObject
			EmployeeUpdateManyWithWhereNestedInput: EmployeeUpdateManyWithWhereNestedInputInputObject
			EmployeeUpdateManyDataInput: EmployeeUpdateManyDataInputInputObject
			DepartmentUpsertNestedInput: DepartmentUpsertNestedInputInputObject
			EmployeeUpdateManyMutationInput: EmployeeUpdateManyMutationInputInputObject
			OfficeCreateInput: OfficeCreateInputInputObject
			EmployeeCreateManyWithoutOfficeInput: EmployeeCreateManyWithoutOfficeInputInputObject
			EmployeeCreateWithoutOfficeInput: EmployeeCreateWithoutOfficeInputInputObject
			OfficeUpdateInput: OfficeUpdateInputInputObject
			EmployeeUpdateManyWithoutOfficeInput: EmployeeUpdateManyWithoutOfficeInputInputObject
			EmployeeUpdateWithWhereUniqueWithoutOfficeInput: EmployeeUpdateWithWhereUniqueWithoutOfficeInputInputObject
			EmployeeUpdateWithoutOfficeDataInput: EmployeeUpdateWithoutOfficeDataInputInputObject
			EmployeeUpsertWithWhereUniqueWithoutOfficeInput: EmployeeUpsertWithWhereUniqueWithoutOfficeInputInputObject
			OfficeUpdateManyMutationInput: OfficeUpdateManyMutationInputInputObject
			DepartmentUpdateInput: DepartmentUpdateInputInputObject
			DepartmentUpdateManyMutationInput: DepartmentUpdateManyMutationInputInputObject
			EmployeeSubscriptionWhereInput: EmployeeSubscriptionWhereInputInputObject
			OfficeSubscriptionWhereInput: OfficeSubscriptionWhereInputInputObject
			DepartmentSubscriptionWhereInput: DepartmentSubscriptionWhereInputInputObject
		}
	}
	enumTypes: {
		EmployeeOrderByInput: EmployeeOrderByInputValues
		OfficeOrderByInput: OfficeOrderByInputValues
		DepartmentOrderByInput: DepartmentOrderByInputValues
		MutationType: MutationTypeValues
	}
}

// Types for Query

type QueryObject =
	| QueryFields
	| { name: 'employee'; args?: QueryEmployeeArgs[] | false; alias?: string }
	| { name: 'employees'; args?: QueryEmployeesArgs[] | false; alias?: string }
	| {
			name: 'employeesConnection'
			args?: QueryEmployeesConnectionArgs[] | false
			alias?: string
	  }
	| { name: 'office'; args?: QueryOfficeArgs[] | false; alias?: string }
	| { name: 'offices'; args?: QueryOfficesArgs[] | false; alias?: string }
	| {
			name: 'officesConnection'
			args?: QueryOfficesConnectionArgs[] | false
			alias?: string
	  }
	| { name: 'department'; args?: QueryDepartmentArgs[] | false; alias?: string }
	| {
			name: 'departments'
			args?: QueryDepartmentsArgs[] | false
			alias?: string
	  }
	| {
			name: 'departmentsConnection'
			args?: QueryDepartmentsConnectionArgs[] | false
			alias?: string
	  }

type QueryFields =
	| 'employee'
	| 'employees'
	| 'employeesConnection'
	| 'office'
	| 'offices'
	| 'officesConnection'
	| 'department'
	| 'departments'
	| 'departmentsConnection'

type QueryEmployeeArgs = 'where'
type QueryEmployeesArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'
type QueryEmployeesConnectionArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'
type QueryOfficeArgs = 'where'
type QueryOfficesArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'
type QueryOfficesConnectionArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'
type QueryDepartmentArgs = 'where'
type QueryDepartmentsArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'
type QueryDepartmentsConnectionArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'

export interface QueryFieldDetails {
	employee: {
		type: 'Employee'
		args: Record<QueryEmployeeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Query'>,
			args: { where: EmployeeWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee | null> | prisma.Employee | null
	}
	employees: {
		type: 'Employee'
		args: Record<QueryEmployeesArgs, core.NexusArgDef<string>>
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'Query'>,
			args: {
				where?: EmployeeWhereInput | null
				orderBy?: prisma.EmployeeOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee[]> | prisma.Employee[]
	}
	employeesConnection: {
		type: 'EmployeeConnection'
		args: Record<QueryEmployeesConnectionArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Query'>,
			args: {
				where?: EmployeeWhereInput | null
				orderBy?: prisma.EmployeeOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.EmployeeConnection> | prisma.EmployeeConnection
	}
	office: {
		type: 'Office'
		args: Record<QueryOfficeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Query'>,
			args: { where: OfficeWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office | null> | prisma.Office | null
	}
	offices: {
		type: 'Office'
		args: Record<QueryOfficesArgs, core.NexusArgDef<string>>
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'Query'>,
			args: {
				where?: OfficeWhereInput | null
				orderBy?: prisma.OfficeOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office[]> | prisma.Office[]
	}
	officesConnection: {
		type: 'OfficeConnection'
		args: Record<QueryOfficesConnectionArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Query'>,
			args: {
				where?: OfficeWhereInput | null
				orderBy?: prisma.OfficeOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.OfficeConnection> | prisma.OfficeConnection
	}
	department: {
		type: 'Department'
		args: Record<QueryDepartmentArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Query'>,
			args: { where: DepartmentWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department | null> | prisma.Department | null
	}
	departments: {
		type: 'Department'
		args: Record<QueryDepartmentsArgs, core.NexusArgDef<string>>
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'Query'>,
			args: {
				where?: DepartmentWhereInput | null
				orderBy?: prisma.DepartmentOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department[]> | prisma.Department[]
	}
	departmentsConnection: {
		type: 'DepartmentConnection'
		args: Record<QueryDepartmentsConnectionArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Query'>,
			args: {
				where?: DepartmentWhereInput | null
				orderBy?: prisma.DepartmentOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.DepartmentConnection> | prisma.DepartmentConnection
	}
}

// Types for Employee

type EmployeeObject =
	| EmployeeFields
	| { name: 'id'; args?: [] | false; alias?: string }
	| { name: 'firstName'; args?: [] | false; alias?: string }
	| { name: 'lastName'; args?: [] | false; alias?: string }
	| { name: 'email'; args?: [] | false; alias?: string }
	| { name: 'department'; args?: [] | false; alias?: string }
	| { name: 'office'; args?: [] | false; alias?: string }

type EmployeeFields =
	| 'id'
	| 'firstName'
	| 'lastName'
	| 'email'
	| 'department'
	| 'office'

export interface EmployeeFieldDetails {
	id: {
		type: 'ID'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	firstName: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	lastName: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	email: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	department: {
		type: 'Department'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Employee'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department | null> | prisma.Department | null
	}
	office: {
		type: 'Office'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Employee'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office | null> | prisma.Office | null
	}
}

// Types for Department

type DepartmentObject =
	| DepartmentFields
	| { name: 'id'; args?: [] | false; alias?: string }
	| { name: 'name'; args?: [] | false; alias?: string }
	| { name: 'lead'; args?: [] | false; alias?: string }
	| {
			name: 'employees'
			args?: DepartmentEmployeesArgs[] | false
			alias?: string
	  }

type DepartmentFields = 'id' | 'name' | 'lead' | 'employees'

type DepartmentEmployeesArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'

export interface DepartmentFieldDetails {
	id: {
		type: 'ID'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	name: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	lead: {
		type: 'Employee'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Department'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee | null> | prisma.Employee | null
	}
	employees: {
		type: 'Employee'
		args: Record<DepartmentEmployeesArgs, core.NexusArgDef<string>>
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'Department'>,
			args: {
				where?: EmployeeWhereInput | null
				orderBy?: prisma.EmployeeOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee[]> | prisma.Employee[]
	}
}

// Types for Office

type OfficeObject =
	| OfficeFields
	| { name: 'id'; args?: [] | false; alias?: string }
	| { name: 'name'; args?: [] | false; alias?: string }
	| { name: 'location'; args?: [] | false; alias?: string }
	| { name: 'employees'; args?: OfficeEmployeesArgs[] | false; alias?: string }

type OfficeFields = 'id' | 'name' | 'location' | 'employees'

type OfficeEmployeesArgs =
	| 'where'
	| 'orderBy'
	| 'skip'
	| 'after'
	| 'before'
	| 'first'
	| 'last'

export interface OfficeFieldDetails {
	id: {
		type: 'ID'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	name: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	location: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	employees: {
		type: 'Employee'
		args: Record<OfficeEmployeesArgs, core.NexusArgDef<string>>
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'Office'>,
			args: {
				where?: EmployeeWhereInput | null
				orderBy?: prisma.EmployeeOrderByInput | null
				skip?: number | null
				after?: string | null
				before?: string | null
				first?: number | null
				last?: number | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee[]> | prisma.Employee[]
	}
}

// Types for EmployeeConnection

type EmployeeConnectionObject =
	| EmployeeConnectionFields
	| { name: 'pageInfo'; args?: [] | false; alias?: string }
	| { name: 'edges'; args?: [] | false; alias?: string }
	| { name: 'aggregate'; args?: [] | false; alias?: string }

type EmployeeConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface EmployeeConnectionFieldDetails {
	pageInfo: {
		type: 'PageInfo'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'EmployeeConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.PageInfo> | prisma.PageInfo
	}
	edges: {
		type: 'EmployeeEdge'
		args: {}
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'EmployeeConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.EmployeeEdge[]> | prisma.EmployeeEdge[]
	}
	aggregate: {
		type: 'AggregateEmployee'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'EmployeeConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.AggregateEmployee> | prisma.AggregateEmployee
	}
}

// Types for PageInfo

type PageInfoObject =
	| PageInfoFields
	| { name: 'hasNextPage'; args?: [] | false; alias?: string }
	| { name: 'hasPreviousPage'; args?: [] | false; alias?: string }
	| { name: 'startCursor'; args?: [] | false; alias?: string }
	| { name: 'endCursor'; args?: [] | false; alias?: string }

type PageInfoFields =
	| 'hasNextPage'
	| 'hasPreviousPage'
	| 'startCursor'
	| 'endCursor'

export interface PageInfoFieldDetails {
	hasNextPage: {
		type: 'Boolean'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	hasPreviousPage: {
		type: 'Boolean'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	startCursor: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: undefined
	}
	endCursor: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: undefined
	}
}

// Types for EmployeeEdge

type EmployeeEdgeObject =
	| EmployeeEdgeFields
	| { name: 'node'; args?: [] | false; alias?: string }
	| { name: 'cursor'; args?: [] | false; alias?: string }

type EmployeeEdgeFields = 'node' | 'cursor'

export interface EmployeeEdgeFieldDetails {
	node: {
		type: 'Employee'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'EmployeeEdge'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee> | prisma.Employee
	}
	cursor: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for AggregateEmployee

type AggregateEmployeeObject =
	| AggregateEmployeeFields
	| { name: 'count'; args?: [] | false; alias?: string }

type AggregateEmployeeFields = 'count'

export interface AggregateEmployeeFieldDetails {
	count: {
		type: 'Int'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for OfficeConnection

type OfficeConnectionObject =
	| OfficeConnectionFields
	| { name: 'pageInfo'; args?: [] | false; alias?: string }
	| { name: 'edges'; args?: [] | false; alias?: string }
	| { name: 'aggregate'; args?: [] | false; alias?: string }

type OfficeConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface OfficeConnectionFieldDetails {
	pageInfo: {
		type: 'PageInfo'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'OfficeConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.PageInfo> | prisma.PageInfo
	}
	edges: {
		type: 'OfficeEdge'
		args: {}
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'OfficeConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.OfficeEdge[]> | prisma.OfficeEdge[]
	}
	aggregate: {
		type: 'AggregateOffice'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'OfficeConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.AggregateOffice> | prisma.AggregateOffice
	}
}

// Types for OfficeEdge

type OfficeEdgeObject =
	| OfficeEdgeFields
	| { name: 'node'; args?: [] | false; alias?: string }
	| { name: 'cursor'; args?: [] | false; alias?: string }

type OfficeEdgeFields = 'node' | 'cursor'

export interface OfficeEdgeFieldDetails {
	node: {
		type: 'Office'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'OfficeEdge'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office> | prisma.Office
	}
	cursor: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for AggregateOffice

type AggregateOfficeObject =
	| AggregateOfficeFields
	| { name: 'count'; args?: [] | false; alias?: string }

type AggregateOfficeFields = 'count'

export interface AggregateOfficeFieldDetails {
	count: {
		type: 'Int'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for DepartmentConnection

type DepartmentConnectionObject =
	| DepartmentConnectionFields
	| { name: 'pageInfo'; args?: [] | false; alias?: string }
	| { name: 'edges'; args?: [] | false; alias?: string }
	| { name: 'aggregate'; args?: [] | false; alias?: string }

type DepartmentConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface DepartmentConnectionFieldDetails {
	pageInfo: {
		type: 'PageInfo'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'DepartmentConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.PageInfo> | prisma.PageInfo
	}
	edges: {
		type: 'DepartmentEdge'
		args: {}
		description: string
		list: true
		nullable: false
		resolve: (
			root: core.RootValue<'DepartmentConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.DepartmentEdge[]> | prisma.DepartmentEdge[]
	}
	aggregate: {
		type: 'AggregateDepartment'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'DepartmentConnection'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.AggregateDepartment> | prisma.AggregateDepartment
	}
}

// Types for DepartmentEdge

type DepartmentEdgeObject =
	| DepartmentEdgeFields
	| { name: 'node'; args?: [] | false; alias?: string }
	| { name: 'cursor'; args?: [] | false; alias?: string }

type DepartmentEdgeFields = 'node' | 'cursor'

export interface DepartmentEdgeFieldDetails {
	node: {
		type: 'Department'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'DepartmentEdge'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department> | prisma.Department
	}
	cursor: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for AggregateDepartment

type AggregateDepartmentObject =
	| AggregateDepartmentFields
	| { name: 'count'; args?: [] | false; alias?: string }

type AggregateDepartmentFields = 'count'

export interface AggregateDepartmentFieldDetails {
	count: {
		type: 'Int'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for Mutation

type MutationObject =
	| MutationFields
	| {
			name: 'createEmployee'
			args?: MutationCreateEmployeeArgs[] | false
			alias?: string
	  }
	| {
			name: 'updateEmployee'
			args?: MutationUpdateEmployeeArgs[] | false
			alias?: string
	  }
	| {
			name: 'updateManyEmployees'
			args?: MutationUpdateManyEmployeesArgs[] | false
			alias?: string
	  }
	| {
			name: 'upsertEmployee'
			args?: MutationUpsertEmployeeArgs[] | false
			alias?: string
	  }
	| {
			name: 'deleteEmployee'
			args?: MutationDeleteEmployeeArgs[] | false
			alias?: string
	  }
	| {
			name: 'deleteManyEmployees'
			args?: MutationDeleteManyEmployeesArgs[] | false
			alias?: string
	  }
	| {
			name: 'createOffice'
			args?: MutationCreateOfficeArgs[] | false
			alias?: string
	  }
	| {
			name: 'updateOffice'
			args?: MutationUpdateOfficeArgs[] | false
			alias?: string
	  }
	| {
			name: 'updateManyOffices'
			args?: MutationUpdateManyOfficesArgs[] | false
			alias?: string
	  }
	| {
			name: 'upsertOffice'
			args?: MutationUpsertOfficeArgs[] | false
			alias?: string
	  }
	| {
			name: 'deleteOffice'
			args?: MutationDeleteOfficeArgs[] | false
			alias?: string
	  }
	| {
			name: 'deleteManyOffices'
			args?: MutationDeleteManyOfficesArgs[] | false
			alias?: string
	  }
	| {
			name: 'createDepartment'
			args?: MutationCreateDepartmentArgs[] | false
			alias?: string
	  }
	| {
			name: 'updateDepartment'
			args?: MutationUpdateDepartmentArgs[] | false
			alias?: string
	  }
	| {
			name: 'updateManyDepartments'
			args?: MutationUpdateManyDepartmentsArgs[] | false
			alias?: string
	  }
	| {
			name: 'upsertDepartment'
			args?: MutationUpsertDepartmentArgs[] | false
			alias?: string
	  }
	| {
			name: 'deleteDepartment'
			args?: MutationDeleteDepartmentArgs[] | false
			alias?: string
	  }
	| {
			name: 'deleteManyDepartments'
			args?: MutationDeleteManyDepartmentsArgs[] | false
			alias?: string
	  }

type MutationFields =
	| 'createEmployee'
	| 'updateEmployee'
	| 'updateManyEmployees'
	| 'upsertEmployee'
	| 'deleteEmployee'
	| 'deleteManyEmployees'
	| 'createOffice'
	| 'updateOffice'
	| 'updateManyOffices'
	| 'upsertOffice'
	| 'deleteOffice'
	| 'deleteManyOffices'
	| 'createDepartment'
	| 'updateDepartment'
	| 'updateManyDepartments'
	| 'upsertDepartment'
	| 'deleteDepartment'
	| 'deleteManyDepartments'

type MutationCreateEmployeeArgs = 'data'
type MutationUpdateEmployeeArgs = 'data' | 'where'
type MutationUpdateManyEmployeesArgs = 'data' | 'where'
type MutationUpsertEmployeeArgs = 'where' | 'create' | 'update'
type MutationDeleteEmployeeArgs = 'where'
type MutationDeleteManyEmployeesArgs = 'where'
type MutationCreateOfficeArgs = 'data'
type MutationUpdateOfficeArgs = 'data' | 'where'
type MutationUpdateManyOfficesArgs = 'data' | 'where'
type MutationUpsertOfficeArgs = 'where' | 'create' | 'update'
type MutationDeleteOfficeArgs = 'where'
type MutationDeleteManyOfficesArgs = 'where'
type MutationCreateDepartmentArgs = 'data'
type MutationUpdateDepartmentArgs = 'data' | 'where'
type MutationUpdateManyDepartmentsArgs = 'data' | 'where'
type MutationUpsertDepartmentArgs = 'where' | 'create' | 'update'
type MutationDeleteDepartmentArgs = 'where'
type MutationDeleteManyDepartmentsArgs = 'where'

export interface MutationFieldDetails {
	createEmployee: {
		type: 'Employee'
		args: Record<MutationCreateEmployeeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { data: EmployeeCreateInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee> | prisma.Employee
	}
	updateEmployee: {
		type: 'Employee'
		args: Record<MutationUpdateEmployeeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { data: EmployeeUpdateInput; where: EmployeeWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee | null> | prisma.Employee | null
	}
	updateManyEmployees: {
		type: 'BatchPayload'
		args: Record<MutationUpdateManyEmployeesArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: {
				data: EmployeeUpdateManyMutationInput
				where?: EmployeeWhereInput | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.BatchPayload> | prisma.BatchPayload
	}
	upsertEmployee: {
		type: 'Employee'
		args: Record<MutationUpsertEmployeeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: {
				where: EmployeeWhereUniqueInput
				create: EmployeeCreateInput
				update: EmployeeUpdateInput
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee> | prisma.Employee
	}
	deleteEmployee: {
		type: 'Employee'
		args: Record<MutationDeleteEmployeeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { where: EmployeeWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee | null> | prisma.Employee | null
	}
	deleteManyEmployees: {
		type: 'BatchPayload'
		args: Record<MutationDeleteManyEmployeesArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { where?: EmployeeWhereInput | null },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.BatchPayload> | prisma.BatchPayload
	}
	createOffice: {
		type: 'Office'
		args: Record<MutationCreateOfficeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { data: OfficeCreateInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office> | prisma.Office
	}
	updateOffice: {
		type: 'Office'
		args: Record<MutationUpdateOfficeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { data: OfficeUpdateInput; where: OfficeWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office | null> | prisma.Office | null
	}
	updateManyOffices: {
		type: 'BatchPayload'
		args: Record<MutationUpdateManyOfficesArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: {
				data: OfficeUpdateManyMutationInput
				where?: OfficeWhereInput | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.BatchPayload> | prisma.BatchPayload
	}
	upsertOffice: {
		type: 'Office'
		args: Record<MutationUpsertOfficeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: {
				where: OfficeWhereUniqueInput
				create: OfficeCreateInput
				update: OfficeUpdateInput
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office> | prisma.Office
	}
	deleteOffice: {
		type: 'Office'
		args: Record<MutationDeleteOfficeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { where: OfficeWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office | null> | prisma.Office | null
	}
	deleteManyOffices: {
		type: 'BatchPayload'
		args: Record<MutationDeleteManyOfficesArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { where?: OfficeWhereInput | null },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.BatchPayload> | prisma.BatchPayload
	}
	createDepartment: {
		type: 'Department'
		args: Record<MutationCreateDepartmentArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { data: DepartmentCreateInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department> | prisma.Department
	}
	updateDepartment: {
		type: 'Department'
		args: Record<MutationUpdateDepartmentArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { data: DepartmentUpdateInput; where: DepartmentWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department | null> | prisma.Department | null
	}
	updateManyDepartments: {
		type: 'BatchPayload'
		args: Record<MutationUpdateManyDepartmentsArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: {
				data: DepartmentUpdateManyMutationInput
				where?: DepartmentWhereInput | null
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.BatchPayload> | prisma.BatchPayload
	}
	upsertDepartment: {
		type: 'Department'
		args: Record<MutationUpsertDepartmentArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: {
				where: DepartmentWhereUniqueInput
				create: DepartmentCreateInput
				update: DepartmentUpdateInput
			},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department> | prisma.Department
	}
	deleteDepartment: {
		type: 'Department'
		args: Record<MutationDeleteDepartmentArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { where: DepartmentWhereUniqueInput },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department | null> | prisma.Department | null
	}
	deleteManyDepartments: {
		type: 'BatchPayload'
		args: Record<MutationDeleteManyDepartmentsArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'Mutation'>,
			args: { where?: DepartmentWhereInput | null },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.BatchPayload> | prisma.BatchPayload
	}
}

// Types for BatchPayload

type BatchPayloadObject =
	| BatchPayloadFields
	| { name: 'count'; args?: [] | false; alias?: string }

type BatchPayloadFields = 'count'

export interface BatchPayloadFieldDetails {
	count: {
		type: 'Long'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for Subscription

type SubscriptionObject =
	| SubscriptionFields
	| {
			name: 'employee'
			args?: SubscriptionEmployeeArgs[] | false
			alias?: string
	  }
	| { name: 'office'; args?: SubscriptionOfficeArgs[] | false; alias?: string }
	| {
			name: 'department'
			args?: SubscriptionDepartmentArgs[] | false
			alias?: string
	  }

type SubscriptionFields = 'employee' | 'office' | 'department'

type SubscriptionEmployeeArgs = 'where'
type SubscriptionOfficeArgs = 'where'
type SubscriptionDepartmentArgs = 'where'

export interface SubscriptionFieldDetails {
	employee: {
		type: 'EmployeeSubscriptionPayload'
		args: Record<SubscriptionEmployeeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Subscription'>,
			args: { where?: EmployeeSubscriptionWhereInput | null },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) =>
			| Promise<prisma.EmployeeSubscriptionPayload | null>
			| prisma.EmployeeSubscriptionPayload
			| null
	}
	office: {
		type: 'OfficeSubscriptionPayload'
		args: Record<SubscriptionOfficeArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Subscription'>,
			args: { where?: OfficeSubscriptionWhereInput | null },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) =>
			| Promise<prisma.OfficeSubscriptionPayload | null>
			| prisma.OfficeSubscriptionPayload
			| null
	}
	department: {
		type: 'DepartmentSubscriptionPayload'
		args: Record<SubscriptionDepartmentArgs, core.NexusArgDef<string>>
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'Subscription'>,
			args: { where?: DepartmentSubscriptionWhereInput | null },
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) =>
			| Promise<prisma.DepartmentSubscriptionPayload | null>
			| prisma.DepartmentSubscriptionPayload
			| null
	}
}

// Types for EmployeeSubscriptionPayload

type EmployeeSubscriptionPayloadObject =
	| EmployeeSubscriptionPayloadFields
	| { name: 'mutation'; args?: [] | false; alias?: string }
	| { name: 'node'; args?: [] | false; alias?: string }
	| { name: 'updatedFields'; args?: [] | false; alias?: string }
	| { name: 'previousValues'; args?: [] | false; alias?: string }

type EmployeeSubscriptionPayloadFields =
	| 'mutation'
	| 'node'
	| 'updatedFields'
	| 'previousValues'

export interface EmployeeSubscriptionPayloadFieldDetails {
	mutation: {
		type: 'MutationType'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'EmployeeSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.MutationType> | prisma.MutationType
	}
	node: {
		type: 'Employee'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'EmployeeSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Employee | null> | prisma.Employee | null
	}
	updatedFields: {
		type: 'String'
		args: {}
		description: string
		list: true
		nullable: false
		resolve: undefined
	}
	previousValues: {
		type: 'EmployeePreviousValues'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'EmployeeSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) =>
			| Promise<prisma.EmployeePreviousValues | null>
			| prisma.EmployeePreviousValues
			| null
	}
}

// Types for EmployeePreviousValues

type EmployeePreviousValuesObject =
	| EmployeePreviousValuesFields
	| { name: 'id'; args?: [] | false; alias?: string }
	| { name: 'firstName'; args?: [] | false; alias?: string }
	| { name: 'lastName'; args?: [] | false; alias?: string }
	| { name: 'email'; args?: [] | false; alias?: string }

type EmployeePreviousValuesFields = 'id' | 'firstName' | 'lastName' | 'email'

export interface EmployeePreviousValuesFieldDetails {
	id: {
		type: 'ID'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	firstName: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	lastName: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	email: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for OfficeSubscriptionPayload

type OfficeSubscriptionPayloadObject =
	| OfficeSubscriptionPayloadFields
	| { name: 'mutation'; args?: [] | false; alias?: string }
	| { name: 'node'; args?: [] | false; alias?: string }
	| { name: 'updatedFields'; args?: [] | false; alias?: string }
	| { name: 'previousValues'; args?: [] | false; alias?: string }

type OfficeSubscriptionPayloadFields =
	| 'mutation'
	| 'node'
	| 'updatedFields'
	| 'previousValues'

export interface OfficeSubscriptionPayloadFieldDetails {
	mutation: {
		type: 'MutationType'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'OfficeSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.MutationType> | prisma.MutationType
	}
	node: {
		type: 'Office'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'OfficeSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Office | null> | prisma.Office | null
	}
	updatedFields: {
		type: 'String'
		args: {}
		description: string
		list: true
		nullable: false
		resolve: undefined
	}
	previousValues: {
		type: 'OfficePreviousValues'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'OfficeSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) =>
			| Promise<prisma.OfficePreviousValues | null>
			| prisma.OfficePreviousValues
			| null
	}
}

// Types for OfficePreviousValues

type OfficePreviousValuesObject =
	| OfficePreviousValuesFields
	| { name: 'id'; args?: [] | false; alias?: string }
	| { name: 'name'; args?: [] | false; alias?: string }
	| { name: 'location'; args?: [] | false; alias?: string }

type OfficePreviousValuesFields = 'id' | 'name' | 'location'

export interface OfficePreviousValuesFieldDetails {
	id: {
		type: 'ID'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	name: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	location: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

// Types for DepartmentSubscriptionPayload

type DepartmentSubscriptionPayloadObject =
	| DepartmentSubscriptionPayloadFields
	| { name: 'mutation'; args?: [] | false; alias?: string }
	| { name: 'node'; args?: [] | false; alias?: string }
	| { name: 'updatedFields'; args?: [] | false; alias?: string }
	| { name: 'previousValues'; args?: [] | false; alias?: string }

type DepartmentSubscriptionPayloadFields =
	| 'mutation'
	| 'node'
	| 'updatedFields'
	| 'previousValues'

export interface DepartmentSubscriptionPayloadFieldDetails {
	mutation: {
		type: 'MutationType'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: (
			root: core.RootValue<'DepartmentSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.MutationType> | prisma.MutationType
	}
	node: {
		type: 'Department'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'DepartmentSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) => Promise<prisma.Department | null> | prisma.Department | null
	}
	updatedFields: {
		type: 'String'
		args: {}
		description: string
		list: true
		nullable: false
		resolve: undefined
	}
	previousValues: {
		type: 'DepartmentPreviousValues'
		args: {}
		description: string
		list: undefined
		nullable: true
		resolve: (
			root: core.RootValue<'DepartmentSubscriptionPayload'>,
			args: {},
			context: core.GetGen<'context'>,
			info?: GraphQLResolveInfo,
		) =>
			| Promise<prisma.DepartmentPreviousValues | null>
			| prisma.DepartmentPreviousValues
			| null
	}
}

// Types for DepartmentPreviousValues

type DepartmentPreviousValuesObject =
	| DepartmentPreviousValuesFields
	| { name: 'id'; args?: [] | false; alias?: string }
	| { name: 'name'; args?: [] | false; alias?: string }

type DepartmentPreviousValuesFields = 'id' | 'name'

export interface DepartmentPreviousValuesFieldDetails {
	id: {
		type: 'ID'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
	name: {
		type: 'String'
		args: {}
		description: string
		list: undefined
		nullable: false
		resolve: undefined
	}
}

export interface EmployeeWhereUniqueInput {
	id?: string | null
	email?: string | null
}
export type EmployeeWhereUniqueInputInputObject =
	| Extract<keyof EmployeeWhereUniqueInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'email'; alias?: string }

export interface EmployeeWhereInput {
	id?: string | null
	id_not?: string | null
	id_in?: string[]
	id_not_in?: string[]
	id_lt?: string | null
	id_lte?: string | null
	id_gt?: string | null
	id_gte?: string | null
	id_contains?: string | null
	id_not_contains?: string | null
	id_starts_with?: string | null
	id_not_starts_with?: string | null
	id_ends_with?: string | null
	id_not_ends_with?: string | null
	firstName?: string | null
	firstName_not?: string | null
	firstName_in?: string[]
	firstName_not_in?: string[]
	firstName_lt?: string | null
	firstName_lte?: string | null
	firstName_gt?: string | null
	firstName_gte?: string | null
	firstName_contains?: string | null
	firstName_not_contains?: string | null
	firstName_starts_with?: string | null
	firstName_not_starts_with?: string | null
	firstName_ends_with?: string | null
	firstName_not_ends_with?: string | null
	lastName?: string | null
	lastName_not?: string | null
	lastName_in?: string[]
	lastName_not_in?: string[]
	lastName_lt?: string | null
	lastName_lte?: string | null
	lastName_gt?: string | null
	lastName_gte?: string | null
	lastName_contains?: string | null
	lastName_not_contains?: string | null
	lastName_starts_with?: string | null
	lastName_not_starts_with?: string | null
	lastName_ends_with?: string | null
	lastName_not_ends_with?: string | null
	email?: string | null
	email_not?: string | null
	email_in?: string[]
	email_not_in?: string[]
	email_lt?: string | null
	email_lte?: string | null
	email_gt?: string | null
	email_gte?: string | null
	email_contains?: string | null
	email_not_contains?: string | null
	email_starts_with?: string | null
	email_not_starts_with?: string | null
	email_ends_with?: string | null
	email_not_ends_with?: string | null
	department?: DepartmentWhereInput | null
	office?: OfficeWhereInput | null
	AND?: EmployeeWhereInput[]
	OR?: EmployeeWhereInput[]
	NOT?: EmployeeWhereInput[]
}
export type EmployeeWhereInputInputObject =
	| Extract<keyof EmployeeWhereInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'id_not'; alias?: string }
	| { name: 'id_in'; alias?: string }
	| { name: 'id_not_in'; alias?: string }
	| { name: 'id_lt'; alias?: string }
	| { name: 'id_lte'; alias?: string }
	| { name: 'id_gt'; alias?: string }
	| { name: 'id_gte'; alias?: string }
	| { name: 'id_contains'; alias?: string }
	| { name: 'id_not_contains'; alias?: string }
	| { name: 'id_starts_with'; alias?: string }
	| { name: 'id_not_starts_with'; alias?: string }
	| { name: 'id_ends_with'; alias?: string }
	| { name: 'id_not_ends_with'; alias?: string }
	| { name: 'firstName'; alias?: string }
	| { name: 'firstName_not'; alias?: string }
	| { name: 'firstName_in'; alias?: string }
	| { name: 'firstName_not_in'; alias?: string }
	| { name: 'firstName_lt'; alias?: string }
	| { name: 'firstName_lte'; alias?: string }
	| { name: 'firstName_gt'; alias?: string }
	| { name: 'firstName_gte'; alias?: string }
	| { name: 'firstName_contains'; alias?: string }
	| { name: 'firstName_not_contains'; alias?: string }
	| { name: 'firstName_starts_with'; alias?: string }
	| { name: 'firstName_not_starts_with'; alias?: string }
	| { name: 'firstName_ends_with'; alias?: string }
	| { name: 'firstName_not_ends_with'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'lastName_not'; alias?: string }
	| { name: 'lastName_in'; alias?: string }
	| { name: 'lastName_not_in'; alias?: string }
	| { name: 'lastName_lt'; alias?: string }
	| { name: 'lastName_lte'; alias?: string }
	| { name: 'lastName_gt'; alias?: string }
	| { name: 'lastName_gte'; alias?: string }
	| { name: 'lastName_contains'; alias?: string }
	| { name: 'lastName_not_contains'; alias?: string }
	| { name: 'lastName_starts_with'; alias?: string }
	| { name: 'lastName_not_starts_with'; alias?: string }
	| { name: 'lastName_ends_with'; alias?: string }
	| { name: 'lastName_not_ends_with'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'email_not'; alias?: string }
	| { name: 'email_in'; alias?: string }
	| { name: 'email_not_in'; alias?: string }
	| { name: 'email_lt'; alias?: string }
	| { name: 'email_lte'; alias?: string }
	| { name: 'email_gt'; alias?: string }
	| { name: 'email_gte'; alias?: string }
	| { name: 'email_contains'; alias?: string }
	| { name: 'email_not_contains'; alias?: string }
	| { name: 'email_starts_with'; alias?: string }
	| { name: 'email_not_starts_with'; alias?: string }
	| { name: 'email_ends_with'; alias?: string }
	| { name: 'email_not_ends_with'; alias?: string }
	| { name: 'department'; alias?: string }
	| { name: 'office'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export interface DepartmentWhereInput {
	id?: string | null
	id_not?: string | null
	id_in?: string[]
	id_not_in?: string[]
	id_lt?: string | null
	id_lte?: string | null
	id_gt?: string | null
	id_gte?: string | null
	id_contains?: string | null
	id_not_contains?: string | null
	id_starts_with?: string | null
	id_not_starts_with?: string | null
	id_ends_with?: string | null
	id_not_ends_with?: string | null
	name?: string | null
	name_not?: string | null
	name_in?: string[]
	name_not_in?: string[]
	name_lt?: string | null
	name_lte?: string | null
	name_gt?: string | null
	name_gte?: string | null
	name_contains?: string | null
	name_not_contains?: string | null
	name_starts_with?: string | null
	name_not_starts_with?: string | null
	name_ends_with?: string | null
	name_not_ends_with?: string | null
	lead?: EmployeeWhereInput | null
	employees_every?: EmployeeWhereInput | null
	employees_some?: EmployeeWhereInput | null
	employees_none?: EmployeeWhereInput | null
	AND?: DepartmentWhereInput[]
	OR?: DepartmentWhereInput[]
	NOT?: DepartmentWhereInput[]
}
export type DepartmentWhereInputInputObject =
	| Extract<keyof DepartmentWhereInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'id_not'; alias?: string }
	| { name: 'id_in'; alias?: string }
	| { name: 'id_not_in'; alias?: string }
	| { name: 'id_lt'; alias?: string }
	| { name: 'id_lte'; alias?: string }
	| { name: 'id_gt'; alias?: string }
	| { name: 'id_gte'; alias?: string }
	| { name: 'id_contains'; alias?: string }
	| { name: 'id_not_contains'; alias?: string }
	| { name: 'id_starts_with'; alias?: string }
	| { name: 'id_not_starts_with'; alias?: string }
	| { name: 'id_ends_with'; alias?: string }
	| { name: 'id_not_ends_with'; alias?: string }
	| { name: 'name'; alias?: string }
	| { name: 'name_not'; alias?: string }
	| { name: 'name_in'; alias?: string }
	| { name: 'name_not_in'; alias?: string }
	| { name: 'name_lt'; alias?: string }
	| { name: 'name_lte'; alias?: string }
	| { name: 'name_gt'; alias?: string }
	| { name: 'name_gte'; alias?: string }
	| { name: 'name_contains'; alias?: string }
	| { name: 'name_not_contains'; alias?: string }
	| { name: 'name_starts_with'; alias?: string }
	| { name: 'name_not_starts_with'; alias?: string }
	| { name: 'name_ends_with'; alias?: string }
	| { name: 'name_not_ends_with'; alias?: string }
	| { name: 'lead'; alias?: string }
	| { name: 'employees_every'; alias?: string }
	| { name: 'employees_some'; alias?: string }
	| { name: 'employees_none'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export interface OfficeWhereInput {
	id?: string | null
	id_not?: string | null
	id_in?: string[]
	id_not_in?: string[]
	id_lt?: string | null
	id_lte?: string | null
	id_gt?: string | null
	id_gte?: string | null
	id_contains?: string | null
	id_not_contains?: string | null
	id_starts_with?: string | null
	id_not_starts_with?: string | null
	id_ends_with?: string | null
	id_not_ends_with?: string | null
	name?: string | null
	name_not?: string | null
	name_in?: string[]
	name_not_in?: string[]
	name_lt?: string | null
	name_lte?: string | null
	name_gt?: string | null
	name_gte?: string | null
	name_contains?: string | null
	name_not_contains?: string | null
	name_starts_with?: string | null
	name_not_starts_with?: string | null
	name_ends_with?: string | null
	name_not_ends_with?: string | null
	location?: string | null
	location_not?: string | null
	location_in?: string[]
	location_not_in?: string[]
	location_lt?: string | null
	location_lte?: string | null
	location_gt?: string | null
	location_gte?: string | null
	location_contains?: string | null
	location_not_contains?: string | null
	location_starts_with?: string | null
	location_not_starts_with?: string | null
	location_ends_with?: string | null
	location_not_ends_with?: string | null
	employees_every?: EmployeeWhereInput | null
	employees_some?: EmployeeWhereInput | null
	employees_none?: EmployeeWhereInput | null
	AND?: OfficeWhereInput[]
	OR?: OfficeWhereInput[]
	NOT?: OfficeWhereInput[]
}
export type OfficeWhereInputInputObject =
	| Extract<keyof OfficeWhereInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'id_not'; alias?: string }
	| { name: 'id_in'; alias?: string }
	| { name: 'id_not_in'; alias?: string }
	| { name: 'id_lt'; alias?: string }
	| { name: 'id_lte'; alias?: string }
	| { name: 'id_gt'; alias?: string }
	| { name: 'id_gte'; alias?: string }
	| { name: 'id_contains'; alias?: string }
	| { name: 'id_not_contains'; alias?: string }
	| { name: 'id_starts_with'; alias?: string }
	| { name: 'id_not_starts_with'; alias?: string }
	| { name: 'id_ends_with'; alias?: string }
	| { name: 'id_not_ends_with'; alias?: string }
	| { name: 'name'; alias?: string }
	| { name: 'name_not'; alias?: string }
	| { name: 'name_in'; alias?: string }
	| { name: 'name_not_in'; alias?: string }
	| { name: 'name_lt'; alias?: string }
	| { name: 'name_lte'; alias?: string }
	| { name: 'name_gt'; alias?: string }
	| { name: 'name_gte'; alias?: string }
	| { name: 'name_contains'; alias?: string }
	| { name: 'name_not_contains'; alias?: string }
	| { name: 'name_starts_with'; alias?: string }
	| { name: 'name_not_starts_with'; alias?: string }
	| { name: 'name_ends_with'; alias?: string }
	| { name: 'name_not_ends_with'; alias?: string }
	| { name: 'location'; alias?: string }
	| { name: 'location_not'; alias?: string }
	| { name: 'location_in'; alias?: string }
	| { name: 'location_not_in'; alias?: string }
	| { name: 'location_lt'; alias?: string }
	| { name: 'location_lte'; alias?: string }
	| { name: 'location_gt'; alias?: string }
	| { name: 'location_gte'; alias?: string }
	| { name: 'location_contains'; alias?: string }
	| { name: 'location_not_contains'; alias?: string }
	| { name: 'location_starts_with'; alias?: string }
	| { name: 'location_not_starts_with'; alias?: string }
	| { name: 'location_ends_with'; alias?: string }
	| { name: 'location_not_ends_with'; alias?: string }
	| { name: 'employees_every'; alias?: string }
	| { name: 'employees_some'; alias?: string }
	| { name: 'employees_none'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export interface OfficeWhereUniqueInput {
	id?: string | null
	name?: string | null
}
export type OfficeWhereUniqueInputInputObject =
	| Extract<keyof OfficeWhereUniqueInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'name'; alias?: string }

export interface DepartmentWhereUniqueInput {
	id?: string | null
	name?: string | null
}
export type DepartmentWhereUniqueInputInputObject =
	| Extract<keyof DepartmentWhereUniqueInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'name'; alias?: string }

export interface EmployeeCreateInput {
	id?: string | null
	firstName?: string
	lastName?: string
	email?: string
	department?: DepartmentCreateOneInput | null
	office?: OfficeCreateOneWithoutEmployeesInput | null
}
export type EmployeeCreateInputInputObject =
	| Extract<keyof EmployeeCreateInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'department'; alias?: string }
	| { name: 'office'; alias?: string }

export interface DepartmentCreateOneInput {
	create?: DepartmentCreateInput | null
	connect?: DepartmentWhereUniqueInput | null
}
export type DepartmentCreateOneInputInputObject =
	| Extract<keyof DepartmentCreateOneInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface DepartmentCreateInput {
	id?: string | null
	name?: string
	lead?: EmployeeCreateOneInput | null
	employees?: EmployeeCreateManyInput | null
}
export type DepartmentCreateInputInputObject =
	| Extract<keyof DepartmentCreateInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'name'; alias?: string }
	| { name: 'lead'; alias?: string }
	| { name: 'employees'; alias?: string }

export interface EmployeeCreateOneInput {
	create?: EmployeeCreateInput | null
	connect?: EmployeeWhereUniqueInput | null
}
export type EmployeeCreateOneInputInputObject =
	| Extract<keyof EmployeeCreateOneInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface EmployeeCreateManyInput {
	create?: EmployeeCreateInput[]
	connect?: EmployeeWhereUniqueInput[]
}
export type EmployeeCreateManyInputInputObject =
	| Extract<keyof EmployeeCreateManyInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface OfficeCreateOneWithoutEmployeesInput {
	create?: OfficeCreateWithoutEmployeesInput | null
	connect?: OfficeWhereUniqueInput | null
}
export type OfficeCreateOneWithoutEmployeesInputInputObject =
	| Extract<keyof OfficeCreateOneWithoutEmployeesInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface OfficeCreateWithoutEmployeesInput {
	id?: string | null
	name?: string
	location?: string
}
export type OfficeCreateWithoutEmployeesInputInputObject =
	| Extract<keyof OfficeCreateWithoutEmployeesInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'name'; alias?: string }
	| { name: 'location'; alias?: string }

export interface EmployeeUpdateInput {
	firstName?: string | null
	lastName?: string | null
	email?: string | null
	department?: DepartmentUpdateOneInput | null
	office?: OfficeUpdateOneWithoutEmployeesInput | null
}
export type EmployeeUpdateInputInputObject =
	| Extract<keyof EmployeeUpdateInput, string>
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'department'; alias?: string }
	| { name: 'office'; alias?: string }

export interface DepartmentUpdateOneInput {
	create?: DepartmentCreateInput | null
	update?: DepartmentUpdateDataInput | null
	upsert?: DepartmentUpsertNestedInput | null
	delete?: boolean | null
	disconnect?: boolean | null
	connect?: DepartmentWhereUniqueInput | null
}
export type DepartmentUpdateOneInputInputObject =
	| Extract<keyof DepartmentUpdateOneInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'upsert'; alias?: string }
	| { name: 'delete'; alias?: string }
	| { name: 'disconnect'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface DepartmentUpdateDataInput {
	name?: string | null
	lead?: EmployeeUpdateOneInput | null
	employees?: EmployeeUpdateManyInput | null
}
export type DepartmentUpdateDataInputInputObject =
	| Extract<keyof DepartmentUpdateDataInput, string>
	| { name: 'name'; alias?: string }
	| { name: 'lead'; alias?: string }
	| { name: 'employees'; alias?: string }

export interface EmployeeUpdateOneInput {
	create?: EmployeeCreateInput | null
	update?: EmployeeUpdateDataInput | null
	upsert?: EmployeeUpsertNestedInput | null
	delete?: boolean | null
	disconnect?: boolean | null
	connect?: EmployeeWhereUniqueInput | null
}
export type EmployeeUpdateOneInputInputObject =
	| Extract<keyof EmployeeUpdateOneInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'upsert'; alias?: string }
	| { name: 'delete'; alias?: string }
	| { name: 'disconnect'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface EmployeeUpdateDataInput {
	firstName?: string | null
	lastName?: string | null
	email?: string | null
	department?: DepartmentUpdateOneInput | null
	office?: OfficeUpdateOneWithoutEmployeesInput | null
}
export type EmployeeUpdateDataInputInputObject =
	| Extract<keyof EmployeeUpdateDataInput, string>
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'department'; alias?: string }
	| { name: 'office'; alias?: string }

export interface OfficeUpdateOneWithoutEmployeesInput {
	create?: OfficeCreateWithoutEmployeesInput | null
	update?: OfficeUpdateWithoutEmployeesDataInput | null
	upsert?: OfficeUpsertWithoutEmployeesInput | null
	delete?: boolean | null
	disconnect?: boolean | null
	connect?: OfficeWhereUniqueInput | null
}
export type OfficeUpdateOneWithoutEmployeesInputInputObject =
	| Extract<keyof OfficeUpdateOneWithoutEmployeesInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'upsert'; alias?: string }
	| { name: 'delete'; alias?: string }
	| { name: 'disconnect'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface OfficeUpdateWithoutEmployeesDataInput {
	name?: string | null
	location?: string | null
}
export type OfficeUpdateWithoutEmployeesDataInputInputObject =
	| Extract<keyof OfficeUpdateWithoutEmployeesDataInput, string>
	| { name: 'name'; alias?: string }
	| { name: 'location'; alias?: string }

export interface OfficeUpsertWithoutEmployeesInput {
	update?: OfficeUpdateWithoutEmployeesDataInput
	create?: OfficeCreateWithoutEmployeesInput
}
export type OfficeUpsertWithoutEmployeesInputInputObject =
	| Extract<keyof OfficeUpsertWithoutEmployeesInput, string>
	| { name: 'update'; alias?: string }
	| { name: 'create'; alias?: string }

export interface EmployeeUpsertNestedInput {
	update?: EmployeeUpdateDataInput
	create?: EmployeeCreateInput
}
export type EmployeeUpsertNestedInputInputObject =
	| Extract<keyof EmployeeUpsertNestedInput, string>
	| { name: 'update'; alias?: string }
	| { name: 'create'; alias?: string }

export interface EmployeeUpdateManyInput {
	create?: EmployeeCreateInput[]
	update?: EmployeeUpdateWithWhereUniqueNestedInput[]
	upsert?: EmployeeUpsertWithWhereUniqueNestedInput[]
	delete?: EmployeeWhereUniqueInput[]
	connect?: EmployeeWhereUniqueInput[]
	set?: EmployeeWhereUniqueInput[]
	disconnect?: EmployeeWhereUniqueInput[]
	deleteMany?: EmployeeScalarWhereInput[]
	updateMany?: EmployeeUpdateManyWithWhereNestedInput[]
}
export type EmployeeUpdateManyInputInputObject =
	| Extract<keyof EmployeeUpdateManyInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'upsert'; alias?: string }
	| { name: 'delete'; alias?: string }
	| { name: 'connect'; alias?: string }
	| { name: 'set'; alias?: string }
	| { name: 'disconnect'; alias?: string }
	| { name: 'deleteMany'; alias?: string }
	| { name: 'updateMany'; alias?: string }

export interface EmployeeUpdateWithWhereUniqueNestedInput {
	where?: EmployeeWhereUniqueInput
	data?: EmployeeUpdateDataInput
}
export type EmployeeUpdateWithWhereUniqueNestedInputInputObject =
	| Extract<keyof EmployeeUpdateWithWhereUniqueNestedInput, string>
	| { name: 'where'; alias?: string }
	| { name: 'data'; alias?: string }

export interface EmployeeUpsertWithWhereUniqueNestedInput {
	where?: EmployeeWhereUniqueInput
	update?: EmployeeUpdateDataInput
	create?: EmployeeCreateInput
}
export type EmployeeUpsertWithWhereUniqueNestedInputInputObject =
	| Extract<keyof EmployeeUpsertWithWhereUniqueNestedInput, string>
	| { name: 'where'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'create'; alias?: string }

export interface EmployeeScalarWhereInput {
	id?: string | null
	id_not?: string | null
	id_in?: string[]
	id_not_in?: string[]
	id_lt?: string | null
	id_lte?: string | null
	id_gt?: string | null
	id_gte?: string | null
	id_contains?: string | null
	id_not_contains?: string | null
	id_starts_with?: string | null
	id_not_starts_with?: string | null
	id_ends_with?: string | null
	id_not_ends_with?: string | null
	firstName?: string | null
	firstName_not?: string | null
	firstName_in?: string[]
	firstName_not_in?: string[]
	firstName_lt?: string | null
	firstName_lte?: string | null
	firstName_gt?: string | null
	firstName_gte?: string | null
	firstName_contains?: string | null
	firstName_not_contains?: string | null
	firstName_starts_with?: string | null
	firstName_not_starts_with?: string | null
	firstName_ends_with?: string | null
	firstName_not_ends_with?: string | null
	lastName?: string | null
	lastName_not?: string | null
	lastName_in?: string[]
	lastName_not_in?: string[]
	lastName_lt?: string | null
	lastName_lte?: string | null
	lastName_gt?: string | null
	lastName_gte?: string | null
	lastName_contains?: string | null
	lastName_not_contains?: string | null
	lastName_starts_with?: string | null
	lastName_not_starts_with?: string | null
	lastName_ends_with?: string | null
	lastName_not_ends_with?: string | null
	email?: string | null
	email_not?: string | null
	email_in?: string[]
	email_not_in?: string[]
	email_lt?: string | null
	email_lte?: string | null
	email_gt?: string | null
	email_gte?: string | null
	email_contains?: string | null
	email_not_contains?: string | null
	email_starts_with?: string | null
	email_not_starts_with?: string | null
	email_ends_with?: string | null
	email_not_ends_with?: string | null
	AND?: EmployeeScalarWhereInput[]
	OR?: EmployeeScalarWhereInput[]
	NOT?: EmployeeScalarWhereInput[]
}
export type EmployeeScalarWhereInputInputObject =
	| Extract<keyof EmployeeScalarWhereInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'id_not'; alias?: string }
	| { name: 'id_in'; alias?: string }
	| { name: 'id_not_in'; alias?: string }
	| { name: 'id_lt'; alias?: string }
	| { name: 'id_lte'; alias?: string }
	| { name: 'id_gt'; alias?: string }
	| { name: 'id_gte'; alias?: string }
	| { name: 'id_contains'; alias?: string }
	| { name: 'id_not_contains'; alias?: string }
	| { name: 'id_starts_with'; alias?: string }
	| { name: 'id_not_starts_with'; alias?: string }
	| { name: 'id_ends_with'; alias?: string }
	| { name: 'id_not_ends_with'; alias?: string }
	| { name: 'firstName'; alias?: string }
	| { name: 'firstName_not'; alias?: string }
	| { name: 'firstName_in'; alias?: string }
	| { name: 'firstName_not_in'; alias?: string }
	| { name: 'firstName_lt'; alias?: string }
	| { name: 'firstName_lte'; alias?: string }
	| { name: 'firstName_gt'; alias?: string }
	| { name: 'firstName_gte'; alias?: string }
	| { name: 'firstName_contains'; alias?: string }
	| { name: 'firstName_not_contains'; alias?: string }
	| { name: 'firstName_starts_with'; alias?: string }
	| { name: 'firstName_not_starts_with'; alias?: string }
	| { name: 'firstName_ends_with'; alias?: string }
	| { name: 'firstName_not_ends_with'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'lastName_not'; alias?: string }
	| { name: 'lastName_in'; alias?: string }
	| { name: 'lastName_not_in'; alias?: string }
	| { name: 'lastName_lt'; alias?: string }
	| { name: 'lastName_lte'; alias?: string }
	| { name: 'lastName_gt'; alias?: string }
	| { name: 'lastName_gte'; alias?: string }
	| { name: 'lastName_contains'; alias?: string }
	| { name: 'lastName_not_contains'; alias?: string }
	| { name: 'lastName_starts_with'; alias?: string }
	| { name: 'lastName_not_starts_with'; alias?: string }
	| { name: 'lastName_ends_with'; alias?: string }
	| { name: 'lastName_not_ends_with'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'email_not'; alias?: string }
	| { name: 'email_in'; alias?: string }
	| { name: 'email_not_in'; alias?: string }
	| { name: 'email_lt'; alias?: string }
	| { name: 'email_lte'; alias?: string }
	| { name: 'email_gt'; alias?: string }
	| { name: 'email_gte'; alias?: string }
	| { name: 'email_contains'; alias?: string }
	| { name: 'email_not_contains'; alias?: string }
	| { name: 'email_starts_with'; alias?: string }
	| { name: 'email_not_starts_with'; alias?: string }
	| { name: 'email_ends_with'; alias?: string }
	| { name: 'email_not_ends_with'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export interface EmployeeUpdateManyWithWhereNestedInput {
	where?: EmployeeScalarWhereInput
	data?: EmployeeUpdateManyDataInput
}
export type EmployeeUpdateManyWithWhereNestedInputInputObject =
	| Extract<keyof EmployeeUpdateManyWithWhereNestedInput, string>
	| { name: 'where'; alias?: string }
	| { name: 'data'; alias?: string }

export interface EmployeeUpdateManyDataInput {
	firstName?: string | null
	lastName?: string | null
	email?: string | null
}
export type EmployeeUpdateManyDataInputInputObject =
	| Extract<keyof EmployeeUpdateManyDataInput, string>
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }

export interface DepartmentUpsertNestedInput {
	update?: DepartmentUpdateDataInput
	create?: DepartmentCreateInput
}
export type DepartmentUpsertNestedInputInputObject =
	| Extract<keyof DepartmentUpsertNestedInput, string>
	| { name: 'update'; alias?: string }
	| { name: 'create'; alias?: string }

export interface EmployeeUpdateManyMutationInput {
	firstName?: string | null
	lastName?: string | null
	email?: string | null
}
export type EmployeeUpdateManyMutationInputInputObject =
	| Extract<keyof EmployeeUpdateManyMutationInput, string>
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }

export interface OfficeCreateInput {
	id?: string | null
	name?: string
	location?: string
	employees?: EmployeeCreateManyWithoutOfficeInput | null
}
export type OfficeCreateInputInputObject =
	| Extract<keyof OfficeCreateInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'name'; alias?: string }
	| { name: 'location'; alias?: string }
	| { name: 'employees'; alias?: string }

export interface EmployeeCreateManyWithoutOfficeInput {
	create?: EmployeeCreateWithoutOfficeInput[]
	connect?: EmployeeWhereUniqueInput[]
}
export type EmployeeCreateManyWithoutOfficeInputInputObject =
	| Extract<keyof EmployeeCreateManyWithoutOfficeInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'connect'; alias?: string }

export interface EmployeeCreateWithoutOfficeInput {
	id?: string | null
	firstName?: string
	lastName?: string
	email?: string
	department?: DepartmentCreateOneInput | null
}
export type EmployeeCreateWithoutOfficeInputInputObject =
	| Extract<keyof EmployeeCreateWithoutOfficeInput, string>
	| { name: 'id'; alias?: string }
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'department'; alias?: string }

export interface OfficeUpdateInput {
	name?: string | null
	location?: string | null
	employees?: EmployeeUpdateManyWithoutOfficeInput | null
}
export type OfficeUpdateInputInputObject =
	| Extract<keyof OfficeUpdateInput, string>
	| { name: 'name'; alias?: string }
	| { name: 'location'; alias?: string }
	| { name: 'employees'; alias?: string }

export interface EmployeeUpdateManyWithoutOfficeInput {
	create?: EmployeeCreateWithoutOfficeInput[]
	delete?: EmployeeWhereUniqueInput[]
	connect?: EmployeeWhereUniqueInput[]
	set?: EmployeeWhereUniqueInput[]
	disconnect?: EmployeeWhereUniqueInput[]
	update?: EmployeeUpdateWithWhereUniqueWithoutOfficeInput[]
	upsert?: EmployeeUpsertWithWhereUniqueWithoutOfficeInput[]
	deleteMany?: EmployeeScalarWhereInput[]
	updateMany?: EmployeeUpdateManyWithWhereNestedInput[]
}
export type EmployeeUpdateManyWithoutOfficeInputInputObject =
	| Extract<keyof EmployeeUpdateManyWithoutOfficeInput, string>
	| { name: 'create'; alias?: string }
	| { name: 'delete'; alias?: string }
	| { name: 'connect'; alias?: string }
	| { name: 'set'; alias?: string }
	| { name: 'disconnect'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'upsert'; alias?: string }
	| { name: 'deleteMany'; alias?: string }
	| { name: 'updateMany'; alias?: string }

export interface EmployeeUpdateWithWhereUniqueWithoutOfficeInput {
	where?: EmployeeWhereUniqueInput
	data?: EmployeeUpdateWithoutOfficeDataInput
}
export type EmployeeUpdateWithWhereUniqueWithoutOfficeInputInputObject =
	| Extract<keyof EmployeeUpdateWithWhereUniqueWithoutOfficeInput, string>
	| { name: 'where'; alias?: string }
	| { name: 'data'; alias?: string }

export interface EmployeeUpdateWithoutOfficeDataInput {
	firstName?: string | null
	lastName?: string | null
	email?: string | null
	department?: DepartmentUpdateOneInput | null
}
export type EmployeeUpdateWithoutOfficeDataInputInputObject =
	| Extract<keyof EmployeeUpdateWithoutOfficeDataInput, string>
	| { name: 'firstName'; alias?: string }
	| { name: 'lastName'; alias?: string }
	| { name: 'email'; alias?: string }
	| { name: 'department'; alias?: string }

export interface EmployeeUpsertWithWhereUniqueWithoutOfficeInput {
	where?: EmployeeWhereUniqueInput
	update?: EmployeeUpdateWithoutOfficeDataInput
	create?: EmployeeCreateWithoutOfficeInput
}
export type EmployeeUpsertWithWhereUniqueWithoutOfficeInputInputObject =
	| Extract<keyof EmployeeUpsertWithWhereUniqueWithoutOfficeInput, string>
	| { name: 'where'; alias?: string }
	| { name: 'update'; alias?: string }
	| { name: 'create'; alias?: string }

export interface OfficeUpdateManyMutationInput {
	name?: string | null
	location?: string | null
}
export type OfficeUpdateManyMutationInputInputObject =
	| Extract<keyof OfficeUpdateManyMutationInput, string>
	| { name: 'name'; alias?: string }
	| { name: 'location'; alias?: string }

export interface DepartmentUpdateInput {
	name?: string | null
	lead?: EmployeeUpdateOneInput | null
	employees?: EmployeeUpdateManyInput | null
}
export type DepartmentUpdateInputInputObject =
	| Extract<keyof DepartmentUpdateInput, string>
	| { name: 'name'; alias?: string }
	| { name: 'lead'; alias?: string }
	| { name: 'employees'; alias?: string }

export interface DepartmentUpdateManyMutationInput {
	name?: string | null
}
export type DepartmentUpdateManyMutationInputInputObject =
	| Extract<keyof DepartmentUpdateManyMutationInput, string>
	| { name: 'name'; alias?: string }

export interface EmployeeSubscriptionWhereInput {
	mutation_in?: prisma.MutationType[]
	updatedFields_contains?: string | null
	updatedFields_contains_every?: string[]
	updatedFields_contains_some?: string[]
	node?: EmployeeWhereInput | null
	AND?: EmployeeSubscriptionWhereInput[]
	OR?: EmployeeSubscriptionWhereInput[]
	NOT?: EmployeeSubscriptionWhereInput[]
}
export type EmployeeSubscriptionWhereInputInputObject =
	| Extract<keyof EmployeeSubscriptionWhereInput, string>
	| { name: 'mutation_in'; alias?: string }
	| { name: 'updatedFields_contains'; alias?: string }
	| { name: 'updatedFields_contains_every'; alias?: string }
	| { name: 'updatedFields_contains_some'; alias?: string }
	| { name: 'node'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export interface OfficeSubscriptionWhereInput {
	mutation_in?: prisma.MutationType[]
	updatedFields_contains?: string | null
	updatedFields_contains_every?: string[]
	updatedFields_contains_some?: string[]
	node?: OfficeWhereInput | null
	AND?: OfficeSubscriptionWhereInput[]
	OR?: OfficeSubscriptionWhereInput[]
	NOT?: OfficeSubscriptionWhereInput[]
}
export type OfficeSubscriptionWhereInputInputObject =
	| Extract<keyof OfficeSubscriptionWhereInput, string>
	| { name: 'mutation_in'; alias?: string }
	| { name: 'updatedFields_contains'; alias?: string }
	| { name: 'updatedFields_contains_every'; alias?: string }
	| { name: 'updatedFields_contains_some'; alias?: string }
	| { name: 'node'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export interface DepartmentSubscriptionWhereInput {
	mutation_in?: prisma.MutationType[]
	updatedFields_contains?: string | null
	updatedFields_contains_every?: string[]
	updatedFields_contains_some?: string[]
	node?: DepartmentWhereInput | null
	AND?: DepartmentSubscriptionWhereInput[]
	OR?: DepartmentSubscriptionWhereInput[]
	NOT?: DepartmentSubscriptionWhereInput[]
}
export type DepartmentSubscriptionWhereInputInputObject =
	| Extract<keyof DepartmentSubscriptionWhereInput, string>
	| { name: 'mutation_in'; alias?: string }
	| { name: 'updatedFields_contains'; alias?: string }
	| { name: 'updatedFields_contains_every'; alias?: string }
	| { name: 'updatedFields_contains_some'; alias?: string }
	| { name: 'node'; alias?: string }
	| { name: 'AND'; alias?: string }
	| { name: 'OR'; alias?: string }
	| { name: 'NOT'; alias?: string }

export type EmployeeOrderByInputValues =
	| 'id_ASC'
	| 'id_DESC'
	| 'firstName_ASC'
	| 'firstName_DESC'
	| 'lastName_ASC'
	| 'lastName_DESC'
	| 'email_ASC'
	| 'email_DESC'
	| 'createdAt_ASC'
	| 'createdAt_DESC'
	| 'updatedAt_ASC'
	| 'updatedAt_DESC'

export type OfficeOrderByInputValues =
	| 'id_ASC'
	| 'id_DESC'
	| 'name_ASC'
	| 'name_DESC'
	| 'location_ASC'
	| 'location_DESC'
	| 'createdAt_ASC'
	| 'createdAt_DESC'
	| 'updatedAt_ASC'
	| 'updatedAt_DESC'

export type DepartmentOrderByInputValues =
	| 'id_ASC'
	| 'id_DESC'
	| 'name_ASC'
	| 'name_DESC'
	| 'createdAt_ASC'
	| 'createdAt_DESC'
	| 'updatedAt_ASC'
	| 'updatedAt_DESC'

export type MutationTypeValues = 'CREATED' | 'UPDATED' | 'DELETED'
